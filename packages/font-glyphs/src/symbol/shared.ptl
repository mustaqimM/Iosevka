$$include '../meta/macros.ptl'

import [mix linreg clamp fallback] from "@iosevka/util"

glyph-module

glyph-block Shared-Symbol-Shapes : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives

	glyph-block-export CreateWaveShape
	define [CreateWaveShape dist sw _phaseShift] : begin
		define WaveResolution 256
		define WaveMagnitude : dist * (3 / 4) - sw / 2
		define WaveAdj : TanSlope * WaveMagnitude * (-0.75)
		define phaseShift : fallback _phaseShift 0
		define [WaveShapeImpl] : with-params [left right ts te xsJoin xfJoin diagJoinS diagJoinF] : glyph-proc
			local resolution : Math.ceil (WaveResolution * (te - ts))
			local knots {}
			foreach [pr : range 0 till resolution] : begin
				local theta : (phaseShift + [mix ts te (pr / resolution)]) * Math.PI * 2
				local waveRelY : [Math.sin theta] + 0.075 * [Math.sin (theta * 3)]
				knots.push : g2
					(WaveAdj * waveRelY) + [mix left right (pr / resolution)]
					SymbolMid + WaveMagnitude * waveRelY
			include : dispiro
				widths.center sw
				if (xsJoin === nothing) {} :  if diagJoinS
					list [g2                   xsJoin SymbolMid]
					list [straight.right.start xsJoin SymbolMid]
				begin knots
				if (xfJoin === nothing) {} :  if diagJoinF
					list [g2                   xfJoin SymbolMid]
					list [straight.right.end   xfJoin SymbolMid]

		define [WaveShape] : with-params [left right xsJoin xfJoin diagJoinS diagJoinF [waveCount 1] [unitWidth Width]] : WaveShapeImpl (unitWidth * -left) (unitWidth * (1 + right)) (-left * waveCount) ((1 + right) * waveCount) xsJoin xfJoin diagJoinS diagJoinF
		return WaveShape

	glyph-block-export TriangleShape
	define [TriangleShape x1 y1 x2 y2 x3 y3 sw] : begin
		local widthSide : if ((y2 - y1) * (y3 - y2) + (x2 - x1) * (x3 - x2) < 0) widths.rhs widths.lhs

		return : intersection
			spiro-outline
				corner x1 y1
				corner x2 y2
				corner x3 y3
			union
				dispiro
					widthSide sw
					corner x1 y1
					corner x2 y2
				dispiro
					widthSide sw
					corner x2 y2
					corner x3 y3
				dispiro
					widthSide sw
					corner x3 y3
					corner x1 y1


	define [HZigzagSegment x1 x2 y1 y2 sw] : intersection
		MaskRight x1
		MaskLeft x2
		ExtLineCenter 1 sw x1 y1 x2 y2
	define [VZigzagSegment y1 y2 x1 x2 sw] : intersection
		MaskAbove y1
		MaskBelow y2
		ExtLineCenter 1 sw x1 y1 x2 y2

	glyph-block-export HZigzag VZigzag
	define [HZigzag midy left right amp sgmts phase sw] : glyph-proc
		local halfPeriod : (right - left) / sgmts
		local up : midy + amp
		local down : midy - amp
		foreach [j : range 0 sgmts] : begin
			include : HZigzagSegment
				left + j * halfPeriod
				left + (j + 1) * halfPeriod
				if ((j + phase) % 2) down up
				if ((j + phase) % 2) up down
				* sw
	define [VZigzag midx bot top amp sgmts phase sw] : glyph-proc
		local halfPeriod : (top - bot) / sgmts
		local up : midx + amp
		local down : midx - amp
		foreach [j : range 0 sgmts] : begin
			include : VZigzagSegment
				bot + j * halfPeriod
				bot + (j + 1) * halfPeriod
				if ((j + phase) % 2) down up
				if ((j + phase) % 2) up down
				* sw
