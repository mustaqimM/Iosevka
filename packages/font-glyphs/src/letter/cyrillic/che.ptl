$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from "@iosevka/util"

glyph-module

glyph-block Letter-Cyrillic-Che : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Mark-Adjustment : LeaningAnchor
	glyph-block-import Letter-Shared : CreateTurnedLetter
	glyph-block-import Letter-Shared-Shapes : SerifFrame RightwardTailedBar DToothlessRise
	glyph-block-import Letter-Shared-Shapes : CyrDescender BottomExtension

	glyph-block-export BODY
	define BODY : object
		STRAIGHT 0
		TAILED   1

	glyph-block-export SERIFS
	define SERIFS : object
		NONE        0
		TL          1
		BR          2
		TL-BR       3
		ALL         4
		TOP         5
		ALL-BGR     6
		TOP-BGR     7

	glyph-block-export CyrCheShape
	define [CyrCheShape] : with-params [df top pyBar bodyType slabType [sw df.mvs] [yBarOffset DToothlessRise]] : glyph-proc
		local bar : top * [fallback pyBar 0.5] + yBarOffset
		include : match bodyType
			[Just BODY.TAILED] : RightwardTailedBar df.rightSB 0 top (sw -- sw)
			__                 : VBar.r df.rightSB 0 top sw
		include : dispiro
			widths.lhs sw
			flat df.leftSB top [heading Downward]
			curl df.leftSB (bar - DToothlessRise + ArchDepthB - HalfStroke)
			g4 (df.middle + CorrectionOMidS) (bar - DToothlessRise - HalfStroke)
			g4 (df.rightSB - 1 / 16) (bar - HalfStroke) [heading Rightward]

		local sf : SerifFrame.fromDf df top 0
		include : tagged 'serifLT' : match slabType
			[Just SERIFS.ALL]        sf.lt.full
			[Just SERIFS.TOP]        sf.lt.full
			[Just SERIFS.ALL-BGR]    sf.lt.outer
			[Just SERIFS.TOP-BGR]    sf.lt.outer
			[Just SERIFS.TL-BR]      sf.lt.outer
			[Just SERIFS.TL]         sf.lt.outer
			__                   : glyph-proc
		include : tagged 'SerifRT' : match slabType
			[Just SERIFS.ALL]        sf.rt.full
			[Just SERIFS.TOP]        sf.rt.full
			[Just SERIFS.ALL-BGR]    sf.rt.inner
			[Just SERIFS.TOP-BGR]    sf.rt.inner
			__                   : glyph-proc
		include : tagged 'SerifRB' : match slabType
			[Just SERIFS.ALL]        sf.rb.fullSide
			[Just SERIFS.ALL-BGR]    sf.rb.fullSide
			[Just SERIFS.TL-BR]      sf.rb.outer
			[Just SERIFS.BR]         sf.rb.outer
			__                   : glyph-proc

	create-glyph 'cyrl/Che' 0x427 : glyph-proc
		include : MarkSet.capital
		include : LeaningAnchor.Below.VBar.r RightSB
		include : CyrCheShape [DivFrame 1] CAP [if SLAB 0.45 0.35] BODY.STRAIGHT
			if SLAB SERIFS.ALL SERIFS.NONE

	create-glyph 0x4B6 : composite-proc
		refer-glyph 'cyrl/Che'
		CyrDescender.rSideJut RightSB 0
	create-glyph 0x4CB : composite-proc
		refer-glyph 'cyrl/Che'
		CyrDescender.lSideJut (RightSB - [HSwToV Stroke]) 0 (jut -- MidJutSide)

	glyph-block-export ItalicConfig
	define ItalicConfig : object
		standard { BODY.STRAIGHT SERIFS.ALL SERIFS.ALL-BGR SERIFS.TL-BR }
		tailed   { BODY.TAILED   SERIFS.TOP SERIFS.TOP-BGR SERIFS.TL    }

	foreach { suffix { body slabUpright slabUprightBGR slabItalic } } [pairs-of ItalicConfig] : do
		create-glyph "cyrl/che.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : LeaningAnchor.Below.VBar.r RightSB
			include : CyrCheShape [DivFrame 1] XH [if SLAB 0.45 0.4] body
				if SLAB [if para.isItalic slabItalic slabUpright] SERIFS.NONE

		create-glyph "cyrl/che.BGR.\(suffix)" : glyph-proc
			include : MarkSet.e
			include : LeaningAnchor.Below.VBar.r RightSB
			include : CyrCheShape [DivFrame 1] XH [if SLAB 0.45 0.4] body
				if SLAB [if para.isItalic slabItalic slabUprightBGR] SERIFS.NONE

	select-variant 'cyrl/che' 0x447
	select-variant 'cyrl/che.BGR' (follow -- 'cyrl/che')

	create-glyph 0x4B7 : composite-proc
		refer-glyph 'cyrl/che.standard'
		CyrDescender.rSideJut RightSB 0
	create-glyph 0x4CC : composite-proc
		refer-glyph 'cyrl/che.standard'
		CyrDescender.lSideJut (RightSB - [HSwToV Stroke]) 0 (jut -- MidJutSide)

	define [ChrVBar top pyBar] : begin
		local SwCheVBar : Math.min OverlayStroke (0.625 * (RightSB - SB - [HSwToV : 2 * Stroke]) / HVContrast)
		local yc : top * [fallback pyBar 0.5] + Stroke * 0.1
		return : VBar.m Middle (yc + LongJut * 0.8) (yc - LongJut * 0.8) SwCheVBar

	derive-composites 'cyrl/CheVBar' 0x4B8 'cyrl/Che' [ChrVBar CAP [if SLAB 0.45 0.35]]
	derive-composites 'cyrl/cheVBar' 0x4B9 'cyrl/che' [ChrVBar XH  [if SLAB 0.45 0.4 ]]

	define ShhaConfig : object
		serifless                 SERIFS.NONE
		topLeftSerifed            SERIFS.BR
		topLeftBottomRightSerifed SERIFS.TL-BR
		serifed                   SERIFS.ALL

	foreach { suffix serifs } [pairs-of ShhaConfig] : do
		create-glyph "cyrl/Shha.\(suffix)" : glyph-proc
			include : MarkSet.capital
			include : LeaningAnchor.Above.VBar.l SB
			include : CyrCheShape [DivFrame 1] CAP (1 - HBarPos) BODY.STRAIGHT serifs
				yBarOffset -- [HSwToV : Math.pow Stroke 2] / (RightSB - SB)
			include : FlipAround Middle (CAP / 2)

	select-variant 'cyrl/Shha' 0x4BA (follow -- 'H')
	select-variant 'cyrl/Shha/descBase' (shapeFrom -- 'cyrl/Shha') (follow -- 'H/descBase')

	derive-composites 'cyrl/ShhaDescender' 0x526 'cyrl/Shha/descBase' [CyrDescender.rSideJut RightSB 0]
